<!-- Copyright (c) Microsoft Corporation. All rights reserved.
     Licensed under the MIT License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.azure</groupId>
  <artifactId>azure-client-sdk-parent</artifactId>
  <packaging>pom</packaging>
  <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->

  <name>Microsoft Azure SDK for Java - Client Libraries</name>
  <description>Parent POM for Microsoft Azure SDK for Java</description>
  <url>https://github.com/Azure/azure-sdk-for-java</url>
  <organization>
    <name>Microsoft Corporation</name>
    <url>http://microsoft.com</url>
  </organization>

  <parent>
    <groupId>com.azure</groupId>
    <artifactId>azure-sdk-parent</artifactId>
    <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-sdk-parent;current} -->
    <relativePath>sdk/parents/azure-sdk-parent/pom.xml</relativePath>
  </parent>

  <licenses>
    <license>
      <name>The MIT License (MIT)</name>
      <url>http://opensource.org/licenses/MIT</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>microsoft</id>
      <name>Microsoft Corporation</name>
    </developer>
  </developers>

  <!-- Repositories definitions -->
  <repositories>
    <repository>
      <id>ossrh</id>
      <name>Sonatype Snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>ossrh</id>
      <name>Sonatype Snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <name>Sonatype Snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
      <uniqueVersion>true</uniqueVersion>
      <layout>default</layout>
    </snapshotRepository>
    <site>
      <id>azure-java-build-docs</id>
      <url>${site.url}/site/</url>
    </site>
  </distributionManagement>

  <issueManagement>
    <system>GitHub</system>
    <url>${issues.url}</url>
  </issueManagement>

  <scm>
    <url>https://github.com/Azure/azure-sdk-for-java</url>
    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</connection>
    <developerConnection/>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <packageOutputDirectory>${project.build.directory}</packageOutputDirectory>
    <legal>
      <![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>
    <testMode>playback</testMode>
    <playbackServerPort>11080</playbackServerPort>
    <alternativePlaybackServerPort>11081</alternativePlaybackServerPort>

    <site.url>https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-java</site.url>
    <issues.url>https://github.com/Azure/azure-sdk-for-java/issues</issues.url>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
        <configuration>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
        </configuration>
      </plugin>


      <!-- Configure the jar plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-jar-plugin;external_dependency} -->
        <configuration>
          <outputDirectory>${packageOutputDirectory}</outputDirectory>
        </configuration>
      </plugin>

      <!-- Configure the javadoc plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <jarOutputDirectory>${packageOutputDirectory}</jarOutputDirectory>
              <failOnError>true</failOnError>
              <failOnWarnings>true</failOnWarnings>
              <doclint>all</doclint>
              <quiet>true</quiet>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Configure the source plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.0.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-source-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <outputDirectory>${packageOutputDirectory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Copy the pom file to output -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <configuration>
              <target>
                <copy file="${project.pomFile}" tofile="${packageOutputDirectory}/${project.build.finalName}.pom"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-instrument</id>
            <goals>
              <goal>instrument</goal>
            </goals>
          </execution>
          <execution>
            <id>default-restore-instrumented-classes</id>
            <goals>
              <goal>restore-instrumented-classes</goal>
            </goals>
          </execution>
          <execution>
            <id>post-unit-test</id>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.reporting.outputDirectory}/test-coverage</outputDirectory>
              <excludes>
                <exclude>**/com/azure/cosmos/implementation/apachecommons/**/*</exclude>
                <exclude>**/com/azure/cosmos/implementation/guava25/**/*</exclude>
                <exclude>**/com/azure/cosmos/implementation/guava27/**/*</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <skip>${jacoco.skip.coverage.check}</skip>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.min.linecoverage}</minimum>
                    </limit>
                    <limit>
                      <counter>BRANCH</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.min.branchcoverage}</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
      </executions>
    </plugin>

      <!-- Allows the sample sources to be built during test-compile phase. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version> <!-- {x-version-update;org.codehaus.mojo:build-helper-maven-plugin;external_dependency} -->
      </plugin>

      <!-- Checks public surface area for breaking changes. -->
      <plugin>
        <groupId>org.revapi</groupId>
        <artifactId>revapi-maven-plugin</artifactId>
        <version>0.11.2</version> <!-- {x-version-update;org.revapi:revapi-maven-plugin;external_dependency} -->
        <configuration>
          <analysisConfigurationFiles>
            <configurationFile>
              <resource>revapi/revapi.json</resource>
            </configurationFile>
          </analysisConfigurationFiles>
          <versionFormat>^\d+\.\d+\.\d+$</versionFormat>
          <checkDependencies>true</checkDependencies>
          <failBuildOnProblemsFound>true</failBuildOnProblemsFound>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>com.azure</groupId>
            <artifactId>sdk-build-tools</artifactId>
            <version>1.0.0</version> <!-- {x-version-update;com.azure:sdk-build-tools;external_dependency} -->
          </dependency>
          <dependency>
            <groupId>org.revapi</groupId>
            <artifactId>revapi-java</artifactId>
            <version>0.20.0</version> <!-- {x-version-update;org.revapi:revapi-java;external_dependency} -->
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>net.jonathangiles.tools</groupId>
        <artifactId>whitelistgenerator-maven-plugin</artifactId>
        <version>1.0.1</version> <!-- {x-version-update;net.jonathangiles.tools:whitelistgenerator-maven-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>generateWhitelistReport</id>
            <phase>package</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <baseDir>.</baseDir>
              <reportFile>target/dependency-whitelist.json</reportFile>
              <ignoredGA>
                <param>com.azure:azure-cosmos-examples</param>
                <param>com.azure:azure-cosmos-benchmark</param>
                <param>com.azure:azure-core-test</param>
                <param>com.azure:azure-e2e</param>
                <param>com.azure:azure-storage-perf</param>
                <param>com.azure:perf-test-core</param>
              </ignoredGA>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->
        <configuration>
          <rules>
            <!--
            Rule: https://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html
            We have a list of blessed dependencies here: https://azure.github.io/azure-sdk/java_implementation.html#dependencies
            Format of includes / excludes is the following: 'groupId[:artifactId][:version][:type][:scope][:classifier]'.
            Wildcards can be used.
            -->
            <bannedDependencies>
              <searchTransitive>false</searchTransitive>
              <excludes>
                <!-- We exclude everything that is runtime-time, compile-time, or provided scoped (i.e. we allow
                dependencies when they are used for test scope or otherwise) -->
                <exclude>*:*:*:*:runtime</exclude>
                <exclude>*:*:*:*:compile</exclude>
                <exclude>*:*:*:*:provided</exclude>
              </excludes>
              <includes>
                <include>com.azure:*</include>

                <!-- Used by many libraries to bring in annotations used by Reactor -->
                <include>com.google.code.findbugs:jsr305:[3.0.2]</include> <!-- {x-include-update;com.google.code.findbugs:jsr305;external_dependency} -->
              </includes>
            </bannedDependencies>

            <!--
            Rule: https://maven.apache.org/enforcer/enforcer-rules/requireReleaseDeps.html
            -->
            <requireReleaseDeps>
              <message>No Snapshots Allowed!</message>
            </requireReleaseDeps>

            <!--
            Rule: https://maven.apache.org/enforcer/enforcer-rules/requireSameVersions.html
            This rule is used to enforce that all modules depend on the same version of particular dependencies or
            plugins.
            -->
            <requireSameVersions>
              <dependencies>
                <dependency>com.azure.*</dependency>
              </dependencies>
            </requireSameVersions>
          </rules>
          <fail>true</fail>
        </configuration>
        <executions>
          <execution>
            <id>default-cli</id>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.1.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
          <configuration>
            <source>1.8</source>
            <doctitle>Azure SDK for Java Reference Documentation</doctitle>
            <windowtitle>Azure SDK for Java Reference Documentation</windowtitle>
            <footer>Visit the &lt;a href="https://docs.microsoft.com/java/azure/"&gt;Azure for Java Developers&lt;/a&gt;site
              for more Java documentation, including quick starts, tutorials, and code samples.
            </footer>
            <linksource>false</linksource>
            <excludePackageNames>
              *.impl*:
              *.implementation*:
              com.azure.tools.checkstyle*:
              com.azure.core.test*:
              com.azure.endtoend*:
              com.azure.perf*
            </excludePackageNames>
            <!-- CosmosSkip - This is temporary, BridgeInternal gets converted to implementation -->
            <sourceFileExcludes>
              <sourceFileExclude>com.azure.cosmos.*BridgeInternal.java</sourceFileExclude>
              <sourceFileExclude>module-info.java</sourceFileExclude>
            </sourceFileExcludes>
            <groups>
              <group>
                <title>Azure Core</title>
                <packages>
                  com.azure.core:com.azure.core.annotation:com.azure.core.credentials:com.azure.core.exception:com.azure.core.http*:com.azure.core.configuration:com.azure.core.util*:com.azure.core.credential:com.azure.core.cryptography
                </packages>
              </group>
              <group>
                <title>Azure Core - AMQP</title>
                <packages>com.azure.core.amqp*</packages>
              </group>
              <group>
                <title>Azure Core - Authentication</title>
                <packages>com.azure.core.auth*</packages>
              </group>
              <group>
                <title>Azure Core - HTTP - Netty</title>
                <packages>com.azure.core.http.netty*</packages>
              </group>
              <group>
                <title>Azure Core - HTTP - OkHttp</title>
                <packages>com.azure.core.http.okhttp*</packages>
              </group>
              <group>
                <title>Azure Core - Management</title>
                <packages>com.azure.core.management*</packages>
              </group>
              <group>
                <title>Azure Core - Serializer - JSON - Gson</title>
                <packages>com.azure.core.serializer.json.gson*</packages>
              </group>
              <group>
                <title>Azure Core - Serializer - JSON - Jackson</title>
                <packages>com.azure.core.serializer.json.jackson*</packages>
              </group>
              <group>
                <title>Azure App Configuration</title>
                <packages>com.azure.data.appconfiguration*</packages>
              </group>
              <group>
                <title>Azure Cosmos</title>
                <packages>com.azure.cosmos*</packages>
              </group>
              <group>
                <title>Azure Event Hubs</title>
                <packages>com.azure.messaging.eventhubs*</packages>
              </group>
              <group>
                <title>Azure Form Recognizer</title>
                <packages>com.azure.ai.formrecognizer*</packages>
              </group>
              <group>
                <title>Azure Identity</title>
                <packages>com.azure.identity*</packages>
              </group>
              <group>
                <title>Azure Key Vault</title>
                <packages>com.azure.security.keyvault*</packages>
              </group>
              <group>
                <title>Azure Search</title>
                <packages>com.azure.search*</packages>
              </group>
              <group>
                <title>Azure Service Bus</title>
                <packages>com.azure.messaging.servicebus*</packages>
              </group>
              <group>
                <title>Azure Storage - Common</title>
                <packages>com.azure.storage.common*</packages>
              </group>
              <group>
                <title>Azure Storage - Blobs</title>
                <packages>com.azure.storage.blob*</packages>
              </group>
              <group>
                <title>Azure Storage Blob - Batch</title>
                <packages>com.azure.storage.blob.batch*</packages>
              </group>
              <group>
                <title>Azure Storage Blobs - Cryptography</title>
                <packages>com.azure.storage.blob.cryptography*</packages>
              </group>
              <group>
                <title>Azure Storage Blobs - NIO</title>
                <packages>com.azure.storage.blob.nio*</packages>
              </group>
              <group>
                <title>Azure Storage - Files</title>
                <packages>com.azure.storage.file*</packages>
              </group>
              <group>
                <title>Azure Storage Files - Data Lake</title>
                <packages>com.azure.storage.file.datalake*</packages>
              </group>
              <group>
                <title>Azure Storage - Queues</title>
                <packages>com.azure.storage.queue*</packages>
              </group>
              <group>
                <title>Azure Telemetry</title>
                <title>Azure Telemetry - OpenTelemetry</title>
                <packages>com.azure.core.tracing*</packages>
              </group>
              <group>
                <title>Azure Text Analytics</title>
                <packages>com.azure.ai.textanalytics*</packages>
              </group>
            </groups>
            <links>
              <link>https://docs.oracle.com/javase/8/docs/api/</link>
              <link>https://projectreactor.io/docs/core/release/api/</link>
              <link>https://netty.io/4.1/api/</link>
              <link>http://reactivex.io/RxJava/javadoc/</link>
            </links>
            <isOffline>false</isOffline>
            <doclet>org.apidesign.javadoc.codesnippet.Doclet</doclet>
            <docletArtifact>
              <groupId>org.apidesign.javadoc</groupId>
              <artifactId>codesnippet-doclet</artifactId>
              <version>0.53</version> <!-- {x-version-update;org.apidesign.javadoc:codesnippet-doclet;external_dependency} -->
            </docletArtifact>
            <additionalOptions>
              <additionalOption>-maxLineLength 120</additionalOption>
              <additionalOption>-snippetpath ${project.basedir}/src/samples/java</additionalOption>
              <additionalOption>-suppressMissingLinkWarnings</additionalOption>
            </additionalOptions>
            <failOnError>true</failOnError>
            <failOnWarnings>true</failOnWarnings>
            <doclint>all</doclint>
            <quiet>true</quiet>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->
          <configuration>
            <runOrder>alphabetical</runOrder>
            <useSystemClassLoader>false</useSystemClassLoader>
            <properties>
              <configurationParameters>
                junit.jupiter.extensions.autodetection.enabled = true
              </configurationParameters>
            </properties>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <dependencies>
    <dependency>
      <!-- must be on the classpath -->
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.agent</artifactId>
      <classifier>runtime</classifier>
      <version>0.8.5</version> <!-- {x-version-update;org.jacoco:org.jacoco.agent;external_dependency} -->
      <scope>test</scope>
    </dependency>
  </dependencies>


  <profiles>

    <!-- Skip module-info.java on Java 8 -->
    <profile>
      <id>java8</id>
      <activation>
        <jdk>[1.8,9)</jdk>
      </activation>
      <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
      </properties>
      <build>
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
        <plugins>
          <!-- Don't compile module-info.java, see java 9+ profile -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
            <configuration>
              <source>1.8</source>
              <target>1.8</target>
              <excludes>
                <exclude>module-info.java</exclude>
              </excludes>
              <compilerArgs>
                <!-- Turn off annotation processing -->
                <arg>-proc:none</arg>

              </compilerArgs>
            </configuration>
          </plugin>
          <!-- Avoid errors from module-info -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.1.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
            <configuration>
              <sourceFileExcludes>
                <sourceFileExclude>module-info.java</sourceFileExclude>
              </sourceFileExcludes>
              <quiet>true</quiet>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <reporting>
        <plugins>
          <!-- Avoid errors from module-info -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.1.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
            <configuration>
              <sourceFileExcludes>
                <sourceFileExclude>module-info.java</sourceFileExclude>
              </sourceFileExcludes>
              <quiet>true</quiet>
            </configuration>
          </plugin>
        </plugins>
      </reporting>
    </profile>

    <!-- Setup for Java 11+ -->
    <profile>
      <id>java-lts</id>
      <activation>
        <jdk>[11,)</jdk>
      </activation>
      <build>
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
            <configuration>
              <compilerArgs>
                <!-- Turn off annotation processing -->
                <arg>-proc:none</arg>

              </compilerArgs>
            </configuration>
            <executions>
              <!-- compile first with module-info for Java 9+ -->
              <execution>
                <id>default-compile</id>
                <configuration>
                  <release>8</release>
                </configuration>
              </execution>
              <!-- then compile without module-info for Java 8 -->
              <execution>
                <id>base-compile</id>
                <goals>
                  <goal>compile</goal>
                </goals>
                <configuration>
                  <release>8</release>
                  <excludes>
                    <exclude>module-info.java</exclude>
                  </excludes>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- Surefire plugin is broken, https://issues.apache.org/jira/browse/SUREFIRE-1501 -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->
            <configuration>
              <useSystemClassLoader>false</useSystemClassLoader>
              <forkCount>1</forkCount>
              <testFailureIgnore>false</testFailureIgnore>
              <systemPropertyVariables>
                <jacoco-agent.destfile>${project.build.directory}/jacoco.exec</jacoco-agent.destfile>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Skip overview generation unless -Dgenerate-overview is passed as an argument.
      This is specifically done to prevent requiring python as a pre-requisite since
      this is only needed by the build system. -->
    <profile>
      <id>generate-overview-from-readme</id>
      <activation>
        <property>
          <name>generate-overview</name>
        </property>
        <file>
          <exists>../../../eng/pipelines/scripts/generate_overview_from_readme.py</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>generate-overview-from-readme</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>python</executable>
                  <workingDirectory>${project.basedir}</workingDirectory>
                  <arguments>
                    <argument>../../../eng/pipelines/scripts/generate_overview_from_readme.py</argument>
                    <argument>--rf</argument>
                    <argument>${project.basedir}/README.md</argument>
                    <argument>--v</argument>
                    <argument>${project.version}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- Add the overview argument to the javadoc args -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.1.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
            <configuration combine.children="append">
              <overview>${project.basedir}/readme_overview.html</overview>
              <quiet>true</quiet>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Skip codesnippet injection unless -Dinject-codesnippets is passed as an argument.
      This is specifically done to prevent requiring python as a pre-requisite since
      this is only needed by the build system. This is also necessary due to limitations in consumption
      from docs side.
       -->
    <profile>
      <id>replace-codesnippet-references</id>
      <activation>
        <property>
          <name>inject-codesnippets</name>
        </property>
        <file>
          <exists>../../../eng/pipelines/scripts/inject_codesnippets.py</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>replace-codesnippet-references</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>python</executable>
                  <workingDirectory>${project.basedir}</workingDirectory>
                  <arguments>
                    <argument>../../../eng/pipelines/scripts/inject_codesnippets.py</argument>
                    <argument>--project-dir</argument>
                    <argument>${project.basedir}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>changelog</id>
      <activation>
        <file>
          <exists>${basedir}/CHANGELOG.md</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.8</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>copy-changelog</id>
                <phase>package</phase>
                <configuration>
                  <target>
                    <echo>Copying ${project.basedir}/CHANGELOG.md to
                      ${packageOutputDirectory}/${project.build.finalName}-changelog.md
                    </echo>
                    <copy file="${project.basedir}/CHANGELOG.md" tofile="${packageOutputDirectory}/${project.build.finalName}-changelog.md"/>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>readme</id>
      <activation>
        <file>
          <exists>${basedir}/README.md</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.8</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>copy-readme</id>
                <phase>package</phase>
                <configuration>
                  <target>
                    <echo>Copying ${project.basedir}/README.md to
                      ${packageOutputDirectory}/${project.build.finalName}-readme.md
                    </echo>
                    <copy file="${project.basedir}/README.md" tofile="${packageOutputDirectory}/${project.build.finalName}-readme.md"/>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- separate profile for windows as the executable on windows is named npx.cmd and npx on other os families -->
      <id>readme-codesnippet-windows</id>
      <activation>
        <property>
          <name>readme-codesnippet-windows</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>code-snippet-for-readme-windows</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>npx.cmd</executable>
                  <arguments>
                    <argument>embedme</argument>
                    <argument>${project.basedir}/README.md</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Profiles for updating README file using embedme tool to inject code snippets from compilable Java source files.
     Activate the profile below to update README files when corresponding Java files are updated. -->
    <profile>
      <id>readme-codesnippet</id>
      <activation>
        <property>
          <name>readme-codesnippet</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>code-snippet-for-readme</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>npx</executable>
                  <arguments>
                    <argument>embedme</argument>
                    <argument>${project.basedir}/README.md</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- separate profile for windows as the executable on windows is named npx.cmd and npx on other os families -->
      <id>verify-readme-windows</id>
      <activation>
        <property>
          <name>verify-readme-windows</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>verify-readme-codesnippet-windows</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>npx.cmd</executable>
                  <arguments>
                    <argument>embedme</argument>
                    <argument>--verify</argument>
                    <argument>${project.basedir}/README.md</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Verify that there are no changes to readme file. Build fails if the there's a difference in README
     after running the embedme tool. -->
    <profile>
      <id>verify-readme</id>
      <activation>
        <property>
          <name>verify-readme</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version> <!-- {x-version-update;org.codehaus.mojo:exec-maven-plugin;external_dependency} -->
            <executions>
              <execution>
                <id>verify-readme-codesnippet</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>npx</executable>
                  <arguments>
                    <argument>embedme</argument>
                    <argument>--verify</argument>
                    <argument>${project.basedir}/README.md</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Runs the dependency checker. -->
    <profile>
      <id>dependency-checker</id>
      <activation>
        <property>
          <name>dependency-checker</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>net.jonathangiles.tools</groupId>
            <artifactId>dependencyChecker-maven-plugin</artifactId>
            <version>1.0.4</version> <!-- {x-version-update;net.jonathangiles.tools:dependencyChecker-maven-plugin;external_dependency} -->
            <inherited>false</inherited>
            <executions>
              <execution>
                <id>generateReport</id>
                <phase>package</phase>
                <goals>
                  <goal>check</goal>
                </goals>
                <configuration>
                  <reporters>html</reporters>
                  <showAll>true</showAll>
                  <dependencyManagement>true</dependencyManagement>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
